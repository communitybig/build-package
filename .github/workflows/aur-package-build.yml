name: AUR Package Build

on:
  repository_dispatch:
    types: 
      - 'aur-*'

env:
  PACKAGE_NAME: ${{ github.event.client_payload.package_name }}
  AUR_URL: ${{ github.event.client_payload.aur_url }}
  BRANCH_TYPE: ${{ github.event.client_payload.branch_type }}

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: talesam/community-build:1.1
      options: --privileged

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH Agent
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.PKGBUILD_KEY }}"
        echo "SSH_AUTH_SOCK=/tmp/ssh_agent.sock" >> $GITHUB_ENV

    - name: Clone AUR Package
      run: |
        git clone ${{ env.AUR_URL }} aur_package
        cd aur_package
        ls -la

    - name: Build and Publish Package
      uses: ./
      with:
        build_env: aur
        branch_type: ${{ env.BRANCH_TYPE }}
        package_name: ${{ env.PACKAGE_NAME }}
        aur_url: ${{ env.AUR_URL }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg_passphrase: ${{ secrets.PASSPHRASE }}
        telegram_token: ${{ secrets.TOKEN_BOT }}
        telegram_chat_id: ${{ secrets.CHAT_ID }}
        repo_host: ${{ secrets.PKGBUILD_HOST }}
        repo_user: ${{ secrets.PKGBUILD_USER }}
        repo_port: ${{ secrets.PKGBUILD_PORT }}
        repo_dir: ${{ secrets.PKGBUILD_DIR }}
        url: ${{ env.AUR_URL }}
        publish_github: 'true'
        push_to_repo: 'true'
        update_db: 'true'
        aur_package_dir: './aur_package'
      env:
        BRANCH_TYPE: ${{ env.BRANCH_TYPE }}


    - name: Cleanup
      if: always()
      run: |
        rm -rf aur_package
