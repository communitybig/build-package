name: AUR Package Build

on:
  repository_dispatch:
    types: ['aur-*']
  workflow_dispatch:
    inputs:
      package_name:
        description: 'Nome do pacote AUR'
        required: true
        type: string
      aur_url:
        description: 'URL do pacote AUR'
        required: true
        type: string
      debug_enabled:
        type: boolean
        description: 'With TMATE'
        required: false
        default: false
      publish_github:
        description: 'Publish package on GitHub'
        type: boolean
        required: false
        default: true
      push_to_repo:
        description: 'Push package to repository'
        type: boolean
        required: false
        default: true
      update_db:
        description: 'Update repository database'
        type: boolean
        required: false
        default: true
      extra_command:
        description: 'Extra command to run before building'
        required: false
        type: string

env:
  PACKAGE_NAME: ${{ github.event.client_payload.package_name || inputs.package_name }}
  AUR_URL: ${{ github.event.client_payload.aur_url || inputs.aur_url }}
  BRANCH_TYPE: aur
  BUILD_ENV: aur

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: talesam/community-build:1.1
      options: --privileged

    steps:
    - name: Initial Debug
      run: |
        echo "Workflow started"
        echo "Event Name: ${{ github.event_name }}"
        echo "Event Action: ${{ github.event.action }}"
        echo "Package Name: ${{ env.PACKAGE_NAME }}"
        echo "AUR URL: ${{ env.AUR_URL }}"
        echo "Branch Type: ${{ env.BRANCH_TYPE }}"
        echo "Build Env: ${{ env.BUILD_ENV }}"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup SSH Agent
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        ssh-agent -a $SSH_AUTH_SOCK > /dev/null
        ssh-add - <<< "${{ secrets.PKGBUILD_KEY }}"
        echo "SSH_AUTH_SOCK=/tmp/ssh_agent.sock" >> $GITHUB_ENV

    - name: Clone AUR Package
      run: |
        git clone ${{ env.AUR_URL }} aur_package
        cd aur_package
        ls -la

    - name: Build and Publish Package
      uses: ./
      with:
        build_env: ${{ env.BUILD_ENV }}
        branch_type: ${{ env.BRANCH_TYPE }}
        package_name: ${{ env.PACKAGE_NAME }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
        gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg_passphrase: ${{ secrets.PASSPHRASE }}
        telegram_token: ${{ secrets.TOKEN_BOT }}
        telegram_chat_id: ${{ secrets.CHAT_ID }}
        repo_host: ${{ secrets.PKGBUILD_HOST }}
        repo_user: ${{ secrets.PKGBUILD_USER }}
        repo_port: ${{ secrets.PKGBUILD_PORT }}
        repo_dir: ${{ secrets.PKGBUILD_DIR }}
        url: ${{ env.AUR_URL }}
        publish_github: ${{ inputs.publish_github }}
        push_to_repo: ${{ inputs.push_to_repo }}
        update_db: ${{ inputs.update_db }}
        aur_package_dir: './aur_package'
        extra_command: ${{ inputs.extra_command }}

    - name: Cleanup
      if: always()
      run: |
        rm -rf aur_package
