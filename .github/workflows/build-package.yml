name: 游닍 Build Package

on:
  repository_dispatch:
    types: 
      - '*'
      - '!aur-*'
  workflow_dispatch:
    inputs:
      branch_type:
        description: 'Branch type (testing, extra or stable)'
        required: true
        type: choice
        options:
          - testing
          - extra
          - stable
      new_branch:
        description: 'Nome do novo branch'
        required: true
        type: string
      debug_enabled:
        type: boolean
        description: 'With TMATE'
        required: false
        default: true
      publish_github:
        description: 'Publish package on GitHub'
        type: boolean
        required: false
        default: true
      push_to_repo:
        description: 'Push package to repository'
        type: boolean
        required: false
        default: true
      update_db:
        description: 'Update repository database'
        type: boolean
        required: false
        default: true
      extra_command:
        description: 'Extra command to run before building'
        required: false
        type: string

env:
  BRANCH_TYPE: ${{ github.event.client_payload.type || github.event.inputs.branch_type }}
  NEW_BRANCH: ${{ github.event.client_payload.branch || github.event.inputs.new_branch }}
  PACKAGE_NAME: ${{ github.event.action }}

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: talesam/community-build:1.1
      options: --privileged
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup SSH Agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.PKGBUILD_KEY }}"
          echo "SSH_AUTH_SOCK=/tmp/ssh_agent.sock" >> $GITHUB_ENV
      
          # Add the repository directory as safe
      - name: Add safe directory
        run: git config --global --add safe.directory /__w/build-package/build-package
  
      # Set environment variables
      - name: Set ENVs
        shell: bash
        run: |
          # Set URL and git branch
          if [ -n "${{ github.event.client_payload.url }}" ]; then
            echo "url=${{ github.event.client_payload.url }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ github.event.client_payload.branch }}" ]; then
            echo "git_branch=${{ github.event.client_payload.branch }}" >> $GITHUB_ENV
          fi
          
          # Set Manjaro branch, default to stable if not specified
          if [ -z "${{ github.event.client_payload.manjaro_branch }}" ]; then
            echo "manjaro_branch=stable" >> $GITHUB_ENV
          else
            echo "manjaro_branch=${{ github.event.client_payload.manjaro_branch }}" >> $GITHUB_ENV
          fi
          
          # Set Community branch, default to testing if not specified
          if [ -z "${{ github.event.client_payload.community_branch }}" ]; then
            echo "community_branch=testing" >> $GITHUB_ENV
          else
            echo "community_branch=${{ github.event.client_payload.community_branch }}" >> $GITHUB_ENV
          fi
      
      - name: Fetch all branches
        run: |
          git fetch --all
          git fetch origin '+refs/heads/*:refs/remotes/origin/*'
      
      - name: Checkout to specified branch or create if not exists
        run: |
          if git ls-remote --exit-code --heads origin ${{ env.NEW_BRANCH }}; then
            git checkout ${{ env.NEW_BRANCH }}
          else
            git checkout -b ${{ env.NEW_BRANCH }}
          fi
      
      - name: echo PayLoads
        shell: bash
        run: |
          echo "url: $url"
          echo "git_branch: $git_branch"
          echo "manjaro_branch: $manjaro_branch"
      
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        with:
          install-dependencies: false

      - name: Build and Publish Package
        uses: ./
        with:
          # Par칙metros relacionados ao ambiente de build e tipo de pacote
          build_env: ${{ env.BRANCH_TYPE }}
          branch_type: ${{ env.BRANCH_TYPE }}
          new_branch: ${{ env.NEW_BRANCH }}
          package_name: ${{ env.PACKAGE_NAME }}
          url: ${{ env.url }}
          git_branch: ${{ env.git_branch }}
          manjaro_branch: ${{ env.manjaro_branch }}
          repo: ${{ github.repository }}

          # Par칙metros relacionados ao debug e tmate
          tmate: ${{ github.event.inputs.debug_enabled || 'false' }}
          
          # Tokens e chaves de seguran칞a
          github_token: ${{ secrets.GITHUB_TOKEN }}
          gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_passphrase: ${{ secrets.PASSPHRASE }}
          telegram_token: ${{ secrets.TOKEN_BOT }}
          telegram_chat_id: ${{ secrets.CHAT_ID }}
          
          # Par칙metros relacionados ao reposit칩rio
          repo_host: ${{ secrets.PKGBUILD_HOST }}
          repo_user: ${{ secrets.PKGBUILD_USER }}
          repo_port: ${{ secrets.PKGBUILD_PORT }}
          repo_dir: ${{ secrets.PKGBUILD_DIR }}
          
          # Op칞칫es de publica칞칚o e atualiza칞칚o
          publish_github: ${{ github.event.inputs.publish_github || 'true' }}
          push_to_repo: ${{ github.event.inputs.push_to_repo || 'true' }}
          update_db: ${{ github.event.inputs.update_db || 'true' }}
          
          # Outros par칙metros espec칤ficos
          extra_command: ${{ github.event.inputs.extra_command }}
