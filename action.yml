name: 'Community Package Action'
description: 'Builds Manjaro Packages'

# Input parameters for the action
inputs:
  source:
    description: 'custom package repo source'
    required: false
  manjaro_branch:
    description: 'Manjaro branch to build'
    default: stable
    required: false
  custom-repo:
    description: 'custom repo'
    required: false
  multilib:
    description: 'build multilib package'
    required: false
    default: false
  repo:
    description: 'package repo'
    required: true
  gpg-key:
    description: 'gpg signing key'
    required: true
  gpg-passphrase:
    description: 'gpg passphrase'
    required: true
  git_branch:
    description: 'extra repository to build package'
    required: false
  extracommand:
    description: 'extra command to build package'
    required: false
  extrapackage:
    description: 'extra package to build'
    required: false
  tmate:
    description: 'run tmate'
    required: false
  repo-mirror:
    description: 'mirror to use in build'
    default: repo
    required: false
  repo-dev:
    description: 'development repository'
    required: false


# Define the steps of the action
runs:
  using: "composite"
  steps:
    # Install build dependencies
    - name: install build-dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install \
        build-essential \
        cmake \
        fakeroot \
        git \
        jq \
        libarchive-dev \
        libarchive-tools \
        libcurl4-openssl-dev \
        libgpgme-dev \
        libssl-dev \
        zip \
        python3-pip
        sudo pip3 install meson
        sudo pip3 install ninja


    # Install pacman
    - id: install-pacman
      shell: bash
      run: |
        echo "### install-pacman ###"
        (
          sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
          pushd pacman
            # Obter a última versão do pacman
            LATEST_VERSION=$(curl -s https://gitlab.archlinux.org/api/v4/projects/pacman%2Fpacman/repository/tags | jq -r '.[0].name' | cut -c2-)
            echo "Baixando a versão $LATEST_VERSION do pacman"

            # Baixar o arquivo fonte
            PACMAN_ARCHIVE="pacman-v${LATEST_VERSION}.tar.gz"
            PACMAN_DOWNLOAD_URL="https://gitlab.archlinux.org/pacman/pacman/-/archive/v${LATEST_VERSION}/${PACMAN_ARCHIVE}"
            sudo wget "$PACMAN_DOWNLOAD_URL"

            # Verificar se o download foi bem-sucedido
            if [ -f "$PACMAN_ARCHIVE" ]; then
              echo "Download concluído com sucesso"
            else
              echo "Erro ao baixar o arquivo $PACMAN_ARCHIVE"
              exit 1
            fi

            # Extrair o arquivo fonte
            sudo tar -xzf "$PACMAN_ARCHIVE"
            PACMAN_DIR="pacman-v${LATEST_VERSION}"

            pushd "$PACMAN_DIR"
              sudo meson --prefix=/usr \
                        --buildtype=plain \
                        -Ddoc=disabled \
                        -Ddoxygen=enabled \
                        -Dscriptlet-shell=/usr/bin/bash \
                        -Dldconfig=/usr/bin/ldconfig \
                        build || exit 1
              sudo meson compile -C build || exit 1
              sudo meson install -C build || exit 1
            popd
            sudo install -m644 pacman.conf /etc/pacman.conf
            sudo install -m644 makepkg.conf /etc/
            sudo mkdir -p /etc/pacman.d
            sudo wget https://raw.githubusercontent.com/BigLinux-Package-Build/manjaro-mirror/main/mirrorlist -O /etc/pacman.d/mirrorlist
          popd
          sudo rm -r pacman
        ) || exit 1
        
        # Configure pacman
        sudo sed -i '/SyncFirst/d' /etc/pacman.conf
        sudo sed -i '/\[core\]/{h;s/.*/\[community-testing\]/;p;x;}' /etc/pacman.conf
        sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /etc/pacman.conf
        sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.communitybig.org\/testing\/$arch/;p;x;}' /etc/pacman.conf
        sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /etc/pacman.conf

        # Add Community and BigLinux repositories
        echo '
        [community-stable]
        SigLevel = PackageRequired
        Server = https://repo.communitybig.org/stable/$arch

        [biglinux-testing]
        SigLevel = PackageRequired
        Server = https://repo.biglinux.com.br/testing/$arch

        [biglinux-stable]
        SigLevel = PackageRequired
        Server = https://repo.biglinux.com.br/stable/$arch' | sudo tee -a /etc/pacman.conf

        # Update chrootbuild configuration
        sudo sed -i '/SyncFirst/d' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*/\[community-testing\]/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.communitybig.org\/testing\/$arch/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /etc/chrootbuild/pacman.conf.x86_64

        echo '
        [community-stable]
        SigLevel = PackageRequired
        Server = https://repo.communitybig.org/stable/$arch

        [biglinux-testing]
        SigLevel = PackageRequired
        Server = https://repo.biglinux.com.br/testing/$arch

        [biglinux-stable]
        SigLevel = PackageRequired
        Server = https://repo.biglinux.com.br/stable/$arch' | sudo tee -a /etc/chrootbuild/pacman.conf.x86_64

        # Update PACKAGER
        echo 'PACKAGER="Community Package Build <talesam@gmail.com>"' | sudo tee -a /etc/makepkg.conf > /dev/null


    # Install keyrings
    - name: install keyrings
      shell: bash
      run: |
        sudo install -dm755 /usr/share/pacman/keyrings/
        
        # Install Manjaro keyring
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
        pushd manjaro-keyring
          sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        popd
        sudo rm -rf manjaro-keyring
        
        # Install Arch Linux keyring
        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo rm -rf archlinux-keyring
        
        # Install BigLinux keyring
        sudo git clone --depth 1 https://github.com/biglinux/biglinux-keyring.git
        pushd biglinux-keyring
          sudo install -m0644 biglinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
        popd
        sudo rm -rf biglinux-keyring
        
        # Install Community keyring
        sudo git clone --depth 1 https://github.com/communitybig/community-keyring.git
        pushd community-keyring
        sudo install -m0644 community-keyring.gpg /usr/share/pacman/keyrings/community.gpg
        sudo install -m0644 community-trusted /usr/share/pacman/keyrings/
        popd
        sudo rm -rf community-keyring


    # Pull keys
    - name: pull keys
      shell: bash
      run: |
        sudo git clone https://github.com/biglinux/biglinux-key.git
        sudo mkdir -p /etc/pacman.d/gnupg/
        sudo cp -r biglinux-key/usr/share/pacman/keyrings/* /etc/pacman.d/gnupg/
        sudo rm -r biglinux-key

    
    # Install manjaro-chrootbuild
    - name: install manjaro-chrootbuild
      shell: bash
      env:
#         EXTRAREPO: ${{ inputs.extrarepo }}
        COMMIT: b3efa6f6929bfc7fc62328b64ab4ebc0800111ce
      run: |
        sudo git clone https://gitlab.manjaro.org/tools/development-tools/manjaro-chrootbuild
        pushd manjaro-chrootbuild
        sudo git checkout $COMMIT
        sudo ./install.sh
        echo 'PACKAGER="Community Package Build <talesam@gmail.com>"' | sudo tee -a /etc/makepkg.conf > /dev/null
        popd
        sudo rm -rf manjaro-chrootbuild
        
        source <(curl -s https://gitlab.manjaro.org/packages/core/manjaro-release/-/raw/master/lsb-release)
        
        # Configure chrootbuild
        sudo sed -i '/SyncFirst/d' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*/\[biglinux-update-stable\]/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/update-stable\/$arch/;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /etc/chrootbuild/pacman.conf.x86_64
        
        # Add BigLinux repositories to chrootbuild
        echo '
        [biglinux-testing]
        SigLevel = PackageRequired
        Server = https://repo.biglinux.com.br/testing/$arch' | sudo tee -a /etc/chrootbuild/pacman.conf.x86_64
        echo '
        [biglinux-stable]
        SigLevel = PackageRequired
        Server = https://repo.biglinux.com.br/stable/$arch' | sudo tee -a /etc/chrootbuild/pacman.conf.x86_64
        
        sudo sed -i '/LocalFileSigLevel/{p;s/.*/ParallelDownloads = 8/;}' /etc/chrootbuild/pacman.conf.x86_64
        sudo sed -i 's|https://repo.manjaro.org/repo|https://mirrors2.manjaro.org|' /usr/lib/manjaro-chrootbuild/util.sh
        sudo sed -i '/-Syy/s/-Syy/-Syy git /' /usr/lib/manjaro-chrootbuild/util-chroot.sh

    
    # Clean the system
    - name: Clean System
      if: "${{ inputs.tmate == '' }}"
      shell: bash
      run: |
        echo "Clean System"
        if [ -z "$(echo ${{ github.event.client_payload.url }} | grep https://github.com/biglinux/)" ]; then
          df -h
          sudo rm -rf \
            /imagegeneration \
            /opt/az \
            /opt/ghc \
            /opt/pipx \
            /opt/google \
            /opt/microsoft \
            /opt/hostedtoolcache \
            /usr/lib/gcc \
            /usr/lib/llvm* \
            /var/lib/mysql \
            /var/lib/snapd \
            /var/lib/docker \
            /usr/lib/google* \
            /usr/lib/firefox \
            /usr/local/julia* \
            /usr/local/.ghcup \
            /usr/local/aws-cli \
            /usr/local/lib/android \
            /usr/local/aws-sam-cli \
            /usr/local/share/chromium \
            /usr/local/lib/node_modules \
            /usr/local/share/powershell \
            /usr/share/swift \
            /usr/share/dotnet
            echo "End Clean System"
            df -h
        fi

    
    # Setup TMATE Session if needed
    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
      if: "${{ inputs.tmate == 'true' }}"

    
    # Download source code
    - name: Download Source
      if: "${{ inputs.tmate == '' }}"
      shell: bash
      run: |
        git clone ${{ github.event.client_payload.url }}.git

    
    # Build the package
    - name: build package
      shell: bash
      if: "${{ inputs.tmate == '' }}"
      run: |
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        
        if [ -n "$(echo ${{ github.event.client_payload.url }} | grep -E 'https://github.com/(biglinux|communitybig)/')" ]; then
        git checkout ${{ inputs.git_branch }}
        sed -i '/source=/s/\.git"/\.git#branch=${{ inputs.git_branch }}"/' PKGBUILD
        fi
        
        ${{ github.event.client_payload.command }}
        ${{ inputs.extracommand }}
        
        echo "branch_build=${{ inputs.manjaro_branch }}"
        
        build_opt=("-H" "-p ." "-b ${{ inputs.manjaro_branch }}" )
        [[ ! -z "${{ inputs.custom-repo }}" ]] && build_opt+=("-k ${{ inputs.custom-repo }}")
        [[ "${{ inputs.multilib }}" == "true" ]] && build_opt+=("-m")
        
        echo "cmd=chrootbuild ${build_opt[@]}"
        sudo chrootbuild ${build_opt[@]}

    
    # Rename the package if necessary
    - name: Rename Package
      shell: bash -O extglob {0}
      run: |
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        for i in *.zst; do if [ -n "$(ls $i | grep :)" ]; then mv $i $(echo $i | sed 's/:/-/'); fi; done

    
    # Sign the package
    - name: sign package
      shell: bash -O extglob {0}
      run: |
        cat <(echo -e "${{ inputs.gpg-key }}") | gpg --batch --import &>/dev/null
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        for p in $(find $PWD -maxdepth 1 -regex '.*\.pkg\.tar\.\(xz\|zst\)'); do
          gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg-passphrase }}" --detach-sign ${p}
        done

    
    # Generate checksums for the package
    - name: CheckSum
      shell: bash -O extglob {0}
      run: |
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        echo '#!/bin/bash
        for i in $(ls *.zst); do md5sum $i >> $i.md5; done
        for i in $(ls *.sig | sed 's/.sig//'); do md5sum $i.sig >> $i.md5; done
        exit 0' > md5.sh
        bash md5.sh
