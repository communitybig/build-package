name: 'Community Package Build Action'
description: 'Builds Manjaro/Community Packages'

inputs:
  build_env:
    description: 'Build environment (testing or stable)'
    required: true
    default: 'testing'
  source:
    description: 'Custom package repo source'
    required: false
  manjaro_branch:
    description: 'Manjaro branch to build'
    default: stable
    required: false
  custom_repo:
    description: 'Custom repo'
    required: false
  multilib:
    description: 'Build multilib package'
    required: false
    default: 'false'
  repo:
    description: 'Package repo'
    required: true
  gpg_key:
    description: 'GPG signing key'
    required: true
  gpg_passphrase:
    description: 'GPG passphrase'
    required: true
  git_branch:
    description: 'Extra repository to build package'
    required: false
  extra_command:
    description: 'Extra command to run before building'
    required: false
  extra_package:
    description: 'Extra package to build'
    required: false
  tmate:
    description: 'Run tmate for debugging'
    required: false
  repo_mirror:
    description: 'Mirror to use in build'
    default: repo
    required: false
  repo_dev:
    description: 'Development repository'
    required: false
  pacman_mirror:
    description: 'Pacman mirror URL'
    required: false
    default: 'https://nnenix.mm.fcix.net/manjaro/stable/$repo/$arch'
  publish_github:
    description: 'Publish package on GitHub'
    required: false
    default: 'true'
  push_to_repo:
    description: 'Push package to repository'
    required: false
    default: 'true'
  update_db:
    description: 'Update repository database'
    required: false
    default: 'true'
  repo_host:
    description: 'Repository host'
    required: false
  repo_user:
    description: 'Repository user'
    required: false
  repo_port:
    description: 'Repository port'
    required: false
  repo_dir:
    description: 'Repository directory'
    required: false
  github_token:
    description: 'GitHub token for authentication'
    required: true
  telegram_token:
    description: 'Telegram bot token for notifications'
    required: false
  telegram_chat_id:
    description: 'Telegram chat ID for notifications'
    required: false
  branch_type:
    description: 'Branch type (testing or stable)'
    required: true
  url:
    description: 'URL do repositório'
    required: false

# Definição dos passos da ação
runs:
  using: "composite"
  steps:
    # Configuração do ambiente de build
    - name: Setup build environment
      shell: bash
      run: |
        # Atualiza o sistema e instala as dependências necessárias
        sudo pacman -Syu --noconfirm
        sudo pacman -S --needed --noconfirm \
          base-devel \
          cmake \
          fakeroot \
          jq \
          libarchive \
          libcurl \
          libgpgme \
          openssl \
          zip \
          python-pip
        sudo pip3 install meson ninja
  
    - name: Configure System and Repositories
      shell: bash
      run: |
        # Set up pacman mirror
        echo 'Server = ${{ inputs.pacman_mirror }}' | sudo tee /etc/pacman.d/mirrorlist

        # Remove existing BigLinux repositories
        sudo sed -i '/biglinux/,$d' /etc/pacman.conf

        # Add appropriate repositories based on build environment
        if [ "${{ inputs.build_env }}" == "testing" ]; then
          echo '
          [community-testing]
          SigLevel = PackageRequired
          Server = https://repo.communitybig.org/testing/$arch

          [biglinux-testing]
          SigLevel = PackageRequired
          Server = https://repo.biglinux.com.br/testing/$arch' | sudo tee -a /etc/pacman.conf /etc/chrootbuild/pacman.conf.x86_64
        elif [ "${{ inputs.build_env }}" == "stable" ]; then
          echo '
          [community-stable]
          SigLevel = PackageRequired
          Server = https://repo.communitybig.org/stable/$arch

          [biglinux-stable]
          SigLevel = PackageRequired
          Server = https://repo.biglinux.com.br/stable/$arch' | sudo tee -a /etc/pacman.conf /etc/chrootbuild/pacman.conf.x86_64
        else
          echo "Invalid build environment specified"
          exit 1
        fi

        # Configure makepkg
        sudo sed -i '/PACKAGER=/s/.*/PACKAGER="Big Community Package Build <talesam@gmail.com>"/' /etc/makepkg.conf
        sudo sed -i '/MAKEFLAGS=/s/.*/MAKEFLAGS="-j'$(nproc)'"/' /etc/makepkg.conf

        # Modify manjaro-chrootbuild
        sudo sed -i 's|https://repo.manjaro.org/repo|https://nnenix.mm.fcix.net/manjaro|' /usr/lib/manjaro-chrootbuild/util.sh
        sudo sed -i '/-Syy/s/-Syy/-Syy git /' /usr/lib/manjaro-chrootbuild/util-chroot.sh

    # Constrói o pacote
    - name: Build package
      shell: bash
      run: |
        # Create build user
        useradd builduser -m
        passwd -d builduser
        printf 'builduser ALL=(ALL) ALL\n' | sudo tee -a /etc/sudoers
        
        # Find and enter the directory containing PKGBUILD
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        
        # Set architecture
        pkgArch=$(grep -E "\barch=" PKGBUILD | cut -d "=" -f2 | tr -cd '[:alnum:]_' | head -n1)
        if [ "$pkgArch" = "any" ]; then
          sed -i "/\barch=/s/arch=.*/arch=('x86_64' 'aarch64')/" PKGBUILD
        fi
        
        # Build for x86_64
        if [ -n "$(sed -n '/\barch=/p' PKGBUILD | grep x86_64)" ]; then
          echo -e "\033[01;31mBuild x86_64\033[0m"
          sudo -u builduser bash -c "sudo chrootbuild -H -p . -b ${{ inputs.branch_type }}"
        fi

        # Executa comando extra, se fornecido
        if [ -n "${{ inputs.extra_command }}" ]; then
          echo "Executando comando extra: ${{ inputs.extra_command }}"
          ${{ inputs.extra_command }}
        fi

    # Assina o pacote
    - name: Sign Package
      shell: bash
      run: |
        # Importa a chave GPG
        echo "${{ inputs.gpg_key }}" | gpg --batch --import &>/dev/null
        
        # Encontra o diretório que contém o PKGBUILD
        gitfolder=$(find . -type f -name PKGBUILD | sed 's/PKGBUILD$//')
        if [ -z "$gitfolder" ]; then
          echo "PKGBUILD não encontrado. Usando diretório atual."
          gitfolder="."
        fi
        cd "$gitfolder"
        
        # Assina todos os pacotes encontrados
        for p in $(find $PWD -maxdepth 1 -regex '.*\.pkg\.tar\.\(xz\|zst\)'); do
          echo "Assinando pacote: $p"
          gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg_passphrase }}" --detach-sign "${p}"
        done
        
        # Lista os arquivos .sig gerados
        echo "Arquivos de assinatura gerados:"
        ls -l *.sig

    # Gera checksums para os pacotes
    - name: Generate checksums
      shell: bash
      run: |
        # Encontra o diretório que contém o PKGBUILD
        gitfolder=$(find . -type f -name PKGBUILD | sed 's/PKGBUILD$//')
        if [ -z "$gitfolder" ]; then
          echo "PKGBUILD não encontrado. Usando diretório atual."
          gitfolder="."
        fi
        cd "$gitfolder"
        
        # Gera checksums para pacotes e assinaturas
        for i in *.pkg.tar.zst; do
          if [ -f "$i" ]; then
            md5sum "$i" >> "$i.md5"
          fi
        done
        
        for i in *.sig; do
          if [ -f "$i" ]; then
            md5sum "$i" >> "${i%.sig}.md5"
          fi
        done
        
        # Lista os arquivos MD5 gerados
        echo "Arquivos MD5 gerados:"
        ls -l *.md5
  
    # Publish the package on GitHub
    - name: Publish Package on GitHub
      if: inputs.publish_github == 'true'
      shell: bash
      run: |
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        ls -lh
        
        # Skip linux-zen packages
        if [ -n "$(grep linux-zen <<< $gitfolder)" ];then
          exit 0
        fi
        
        # Determine the last committer
        lastCommit=$(git log -1 --format="%an <%ae>")
        if [ "$(grep github-actions <<< $lastCommit)" ];then
          lastCommit=$(git log -2 --format="%an <%ae>")
        fi
        
        # Set up GitHub authentication and determine the repository
        if [ -n "$(grep -i communitybig <<< ${{ inputs.source }})" ];then
          echo ${{ inputs.github_token }} | gh auth login --with-token
          repo=$(sed 's|https://github.com/||' <<< ${{ inputs.source }})
        else
          echo ${{ inputs.github_token }} | gh auth login --with-token
          repo=${{ inputs.repo }}
        fi
        
        # Create and upload the release
        ls *.pkg* | head -n1 | sed 's/.pkg.*//' > release
        release=$(cat release)
        
        echo "release=$release"
        echo "repo=$repo"
        echo "url=${{ inputs.source }}"
        
        gh release create ${release} --title ${release} --repo ${repo} --notes "automated release from ${{ inputs.source }}" || echo "release already exists"
        for i in .zst .sig .tar .md5; do
          find -iname "*$i" -exec gh release upload ${release} --repo ${repo} --clobber {} \;
        done
        
    # Push the package to the repository
    - name: Push to Repo
      if: inputs.push_to_repo == 'true'
      shell: bash
      env:
        LANG: en_US.UTF-8
        LC_ALL: en_US.UTF-8
      run: |
        # Set up SSH
        ssh-keyscan -t rsa -p ${{ inputs.repo_port }} ${{ inputs.repo_host }} >> /root/.ssh/known_hosts
        ip=${{ inputs.repo_host }}
        
        # Find the PKGBUILD directory
        gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
        cd $gitfolder
        ls -lh
        
        # Determine the last committer
        lastCommit=$(git log -1 --format="%an <%ae>")
        if [ "$(grep github-actions <<< $lastCommit)" ];then
          lastCommit=$(git log -2 --format="%an <%ae>")
        fi
        
        # Set the branch based on BRANCH_TYPE
        if [ "${{ inputs.branch_type }}" == "stable" ]; then
          branch="STABLE"
        else
          branch="TESTING"
        fi
        
        # Function to send Telegram message
        send_telegram_message() {
          message="$1"
          curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage" \
            -d chat_id="${{ inputs.telegram_chat_id }}" \
            -d text="$message"\
            -d parse_mode="MarkdownV2"
        }
        
        # Upload the package files
        for i in *.zst; do
          pkgname=$(basename $i)
          
          pkgname_escaped=$(echo "$pkgname" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
          branch_escaped=$(echo "$branch" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
          
          echo "📦 Pacote $pkgname sendo enviado para o repositório 🚀 $branch 🎯"
          send_telegram_message "📦 **Pacote** \`$pkgname_escaped\` **sendo enviado para o repositório** 🚀 \`$branch_escaped\`🎯"
          rsync -vapz -e "ssh -p ${{ inputs.repo_port }}" $i ${{ inputs.repo_user }}@$ip:${{ inputs.repo_dir }}/${branch,,}/x86_64/
          if [ $? -eq 0 ]; then
            send_telegram_message "✅ **Pacote** \`$pkgname_escaped\` **enviado com sucesso para o repositório** \`$branch_escaped\`"
          else
            send_telegram_message "❌ **Falha ao enviar o pacote** \`$pkgname_escaped\` **para o repositório** \`$branch_escaped\`"
          fi
        done
        for i in *.sig *.md5; do
          rsync -vapz -e "ssh -p ${{ inputs.repo_port }}" $i ${{ inputs.repo_user }}@$ip:${{ inputs.repo_dir }}/${branch,,}/x86_64/
        done


    # Runs only if previous steps were successful
    - name: Update Repository Database
      if: inputs.update_db == 'true' && success()
      shell: bash
      run: |
        # Function to send Telegram message
        send_telegram_message() {
          message="$1"
          curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage" \
            -d chat_id="${{ inputs.telegram_chat_id }}" \
            -d text="$message" \
            -d parse_mode="MarkdownV2"
        }
        
        # Determine the database name based on the branch type
        if [ "${{ inputs.branch_type }}" == "testing" ]; then
          branch="TESTING"
          db_name="community-testing"
        elif [ "${{ inputs.branch_type }}" == "stable" ]; then
          branch="STABLE"
          db_name="community-stable"
        else
          echo "Error: Unknown branch type: ${{ inputs.branch_type }}"
          exit 1
        fi
        
        echo "Branch: $branch"
        echo "Database name: $db_name"
        
        branch_escaped=$(echo "$branch" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
        db_name_escaped=$(echo "$db_name" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
        
        echo "🔄 Sincronizando o banco de dados do repositório $branch..."
        send_telegram_message "🔄 **Iniciando sincronização do banco de dados do repositório** \`$branch_escaped\`"
        
        ssh -v ${{ inputs.repo_user }}@${{ inputs.repo_host }} -p ${{ inputs.repo_port }} << EOF
          set -x
          cd ${{ inputs.repo_dir }}/${branch,,}/x86_64
          repo-add -n -R $db_name.db.tar.gz *.pkg.tar.zst
          exit_code=\$?
          echo "Comando repo-add concluído com código de saída: \$exit_code"
          exit \$exit_code
        EOF
        
        if [ $? -eq 0 ]; then
          echo "✅ Sincronização do banco de dados concluída com sucesso!"
          send_telegram_message "✅ **Sincronização do banco de dados do repositório** \`$branch_escaped\` **concluída com sucesso\!**"
        else
          echo "❌ Falha na sincronização do banco de dados."
          send_telegram_message "❌ **Falha na sincronização do banco de dados do repositório** \`$branch_escaped\`\."
        fi

    # Keeps only the most recent package
    - name: Clean Old Packages
      if: inputs.update_db == 'true' && success()
      shell: bash
      run: |
        ssh ${{ inputs.repo_user }}@${{ inputs.repo_host }} -p ${{ inputs.repo_port }} << EOF
          set -x
          cd ${{ inputs.repo_dir }}/${branch,,}/x86_64
          paccache -rk1
          echo "Comando paccache concluído com código de saída: \$?"
        EOF


    # Send a Telegram alert if the build fails
    - name: Telegram Alert Fail
      if: failure()
      shell: bash
      run: |
        curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage" \
          -d chat_id="${{ inputs.telegram_chat_id }}" \
          -d text="🚨 FALHA ao criar Pacote Community: ${{ github.event.action }} a partir do branch ${{ github.ref_name }}, link do erro: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 🖥"
