name: "Community Package Build Action"
description: "Builds Manjaro/Community Packages"

inputs:
  build_env:
    description: "Build environment (testing, extra, stable, or aur)"
    required: true
    default: "testing"
  source:
    description: "Custom package repo source"
    required: false
  manjaro_branch:
    description: "Manjaro branch to build"
    default: stable
    required: false
  custom_repo:
    description: "Custom repo"
    required: false
  multilib:
    description: "Build multilib package"
    required: false
    default: "false"
  repo:
    description: "Package repo"
    required: true
  gpg_key:
    description: "GPG signing key"
    required: true
  gpg_passphrase:
    description: "GPG passphrase"
    required: true
  git_branch:
    description: "Extra repository to build package"
    required: false
  extra_command:
    description: "Extra command to run before building"
    required: false
  extra_package:
    description: "Extra package to build"
    required: false
    default: "false"
  tmate:
    description: "Run tmate for debugging"
    required: false
  repo_mirror:
    description: "Mirror to use in build"
    default: repo
    required: false
  repo_dev:
    description: "Development repository"
    required: false
  pacman_mirror:
    description: "Optional: Specific mirror to override automatic selection"
    required: false
    #default: 'https://nnenix.mm.fcix.net/manjaro/stable/$repo/$arch'
    default: "https://mirrors.ocf.berkeley.edu/manjaro/stable/$repo/$arch"
  publish_github:
    description: "Publish package on GitHub"
    required: false
    default: "true"
  push_to_repo:
    description: "Push package to repository"
    required: false
    default: "true"
  update_db:
    description: "Update repository database"
    required: false
    default: "true"
  repo_host:
    description: "Repository host"
    required: false
  repo_user:
    description: "Repository user"
    required: false
  repo_port:
    description: "Repository port"
    required: false
  repo_dir:
    description: "Repository directory"
    required: false
  github_token:
    description: "GitHub token for authentication"
    required: true
  telegram_token:
    description: "Telegram bot token for notifications"
    required: false
  telegram_chat_id:
    description: "Telegram chat ID for notifications"
    required: false
  branch_type:
    description: "Branch type (testing or stable)"
    required: true
  url:
    description: "URL do repositório"
    required: false
  new_branch:
    description: "Nome do novo branch"
    required: false
  package_name:
    description: "Nome do pacote"
    required: false
  aur_package_dir:
    description: "Directory containing the AUR package"
    required: false
    default: "."
  start_time:
    description: "Hora de início do workflow"
    required: false
  start_timestamp:
    description: "Timestamp de início do workflow"
    required: false
  repo_origem:
    description: "Repositorio origem"
    required: false
  branch_fullname:
    description: "Nome completo do branch de origem"
    required: false

# Definição dos passos da ação
runs:
  using: "composite"
  steps:
    - name: Definir a função send_telegram_message no script temporário
      shell: bash
      env:
        TELEGRAM_TOKEN: "${{ inputs.telegram_token }}"
        TELEGRAM_CHAT_ID: "${{ inputs.telegram_chat_id }}"
      run: |
        #Definir a função send_telegram_message no script temporário
        cat << 'EOF' > /tmp/send_telegram_message.sh
        export TERM=${TERM:-xterm}
        export TERM=${TERM:-xterm-256color}

        #Definindo variáveis de cores
        export red="\033[01;31m"
        export green="\033[01;32m"
        export yellow="\033[01;33m"
        export blue="\033[01;34m"
        export pink="\033[01;35m"
        export cyan="\033[01;36m"
        export reset="\033[0m"
        alias ls='ls -lha --color=auto'
        alias dir='ls -lha --color=auto'

        die() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${cyan}error: ${red}${msg}${reset}"
          exit  1
        }
        export -f die

        msg_raw() {
          local msg="$1"
          # Remove tags HTML, se existirem
          #msg="$(sed 's/<[^>]*>//g' <<< "$msg")"

          # Verifica se existe ':' na mensagem
          if [[ "$msg" == *:* ]]; then
            # Divide a string antes e depois do primeiro ':'
            local before_colon="${msg%%:*}:"
            local after_colon="${msg#*: }"
            # Aplica as cores
            msg="${cyan}${before_colon} ${yellow}${after_colon}${reset}"
          else
            # Se não houver ':', aplica apenas a cor padrão
            msg="${cyan}${msg}${reset}"
          fi
          echo -e "$msg"
        }
        export -f msg_raw

        msg() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${cyan}running: ${yellow}${msg}${reset}"
        }
        export -f msg

        msg_ok() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${cyan}feito: ${green}${msg}${reset}"
        }
        export -f msg_ok

        msg_run() {
          local msg="$1"
          echo -e "BP=>${cyan}running: ${yellow}${msg}${reset}"
          eval "$msg"
        }
        export -f msg_run

        msg_info() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${yellow}info   : ${cyan}${msg}${reset}"
        }
        export -f msg_info

        msg_warning() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${red}warning: ${orange}${msg}${reset}"
        }
        export -f msg_warning

        replicate() {
          local char=${1:-'#'}
          local nsize=${2:-$(tput cols)}
          local line
          #printf -v line "%*s" "$nsize" && echo "${line// /$char}"
          #printf -v line "%*s" "$nsize" && echo -e "\033[31m${line// /$char}\033[0m"
          printf -v line "%*s" "$nsize" && echo -e "${blue}${line// /$char}${reset}"
        }
        export -f replicate

        send_telegram_message() {
          local message="$1"
          local parse_mode="$2"

          # Define parse_mode como "MarkdownV2" se não for especificado
          [[ -z $parse_mode ]] && parse_mode="HTML"

          # Remove as tags HTML e exibe o resultado no terminal
          echo -e "${green}$(sed 's/<[^>]*>//g' <<< "$message")${reset}"
          # Envia a mensagem original com HTML para o Telegram
          curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage" \
            -d chat_id="${{ inputs.telegram_chat_id }}" \
            -d text="$message" \
            -d parse_mode="$parse_mode"
        }
        export -f send_telegram_message
        EOF

    - name: Obter o hash do último commit do repositório remoto
      shell: bash
      run: |
        # Obter o hash do último commit do repositório remoto
        source /tmp/send_telegram_message.sh
        replicate '='
        REPO_URL="${{ inputs.url }}"
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        COMMIT_HASH="$(git ls-remote $REPO_URL HEAD | awk '{print $1}')"
        #echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV
        msg_raw "Last commit hash: $COMMIT_HASH"

        # Buscar informações do commit remoto
        git fetch $REPO_URL $COMMIT_HASH

        # Obter a mensagem do commit a partir do hash
        COMMIT_MESSAGE="$(git log -1 --format=%B $COMMIT_HASH)"
        #echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        msg_raw "Last commit message: $COMMIT_MESSAGE"
        replicate '='

    - name: Inicializando a criação de pacote
      shell: bash
      run: |
        #Inicializando a criação de pacote
        source /tmp/send_telegram_message.sh
        replicate '='
        #https://docs.github.com/pt/enterprise-server@3.10/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
        pkgname="${{ inputs.package_name }}"
        branch="${{ inputs.branch_type }}"
        repo_path="${{ inputs.repo_dir }}"
        repo_origem="${{ inputs.url }}"
        started_by_user="${{ github.actor }}"
        triggered_by_user="${{ github.triggering_actor }}"
        #pkgname_escaped=$(echo "$pkgname" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
        #branch_escaped=$(echo "${branch^^}" | sed 's/[_*[\]()~`>#+\-=|{}.!]/\\&/g')
        pkgname_escaped="$pkgname"
        branch_escaped="${branch}"

        message="⭐ <b>[step 1/6] build-package - INICIANDO CRIAÇÃO DE PACOTE</b>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Workflow:</b> <code>build-package/action.yml</code>
        <b>Nome:</b> <code>${pkgname_escaped}</code>
        <b>Commit:</b> <code>${COMMIT_MESSAGE}</code>
        <b>Origem:</b> <code>${repo_origem}</code>
        <b>Iniciado/Triggered:</b> <code>${started_by_user}/${triggered_by_user}</code>
        <b>Branch:</b> <code>${branch_escaped}</code>"
        #send_telegram_message "$message"
        msg_info "$message"
        replicate '='

    - name: Debug Inputs
      shell: bash
      run: |
        # Debug Inputs
        source /tmp/send_telegram_message.sh
        replicate '='
        msg_info "DEBUG All inputs"
        msg_raw "DEBUG Json inputs         : ${{ toJson(inputs) }}"
        msg_raw "DEBUG build_env from input: ${{ inputs.build_env }}"
        msg_raw "DEBUG build_env from env  : $DEBUG_BUILD_ENV"
        msg_raw "DEBUG tmate input         : ${{ inputs.tmate }}"
        msg_info "DEBUG All env variables above"
        msg_raw "$(env | sort)"
        replicate '='

    - name: Setup build environment
      shell: bash
      run: |
        #Config ambiente de build - Atualiza e instala dependências necessárias
        source /tmp/send_telegram_message.sh
        replicate '='
        #sudo pacman -Syu --quiet --needed --noconfirm \
        #   base-devel \
        #   cmake \
        #   libarchive \
        #   meson \
        #   ninja \
        #   yay \
        #   tmate \
        #   ncurses \
        #   duf \
        #   curl \
        #   tree
        #msg_run 'sudo pacman -Syu --quiet --needed --noconfirm --overwrite \*'
        msg_run 'sudo pacman -Syu --ignore=chililinux-livecd-key,chili-livecd-key,community-livecd-key --quiet --needed --noconfirm --overwrite \*'
        replicate '='

        # Verifica as versões instaladas
        meson --version
        ninja --version

    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event.client_payload.tmate == true || inputs.tmate == true}}
      with:
        install-dependencies: false
        detached: true

    - name: Import GPG key
      shell: bash
      run: |
        # Import GPG key
        source /tmp/send_telegram_message.sh
        replicate '='
        if gpg --batch --import <<< "${{ inputs.gpg_key }}"; then
          msg_ok "Importação da chave GPG foi bem-sucedida"
        else
          die "Erro na importação da chave GPG"
        fi
        replicate '='

    - name: Configure System and Repositories
      shell: bash
      run: |
        #Configure System and Repositories
        source /tmp/send_telegram_message.sh
        replicate '#'
        msg_info "#Set up pacman mirror"
        msg_raw "Usando mirror especificado: ${{ inputs.pacman_mirror }}"
        echo 'Server = ${{ inputs.pacman_mirror }}' | sudo tee -a /etc/pacman.d/mirrorlist
        echo 'Server = https://linorg.usp.br/manjaro/testing/$repo/$arch' | sudo tee -a /etc/pacman.d/mirrorlist
        echo 'Server = https://manjaro.c3sl.ufpr.br/testing/$repo/$arch' | sudo tee -a /etc/pacman.d/mirrorlist

        replicate '-'
        msg_run 'cat /etc/pacman.d/mirrorlist'
        replicate '-'
        msg_run 'cat /etc/pacman.conf'
        replicate '-'

        msg_info "#Remove existing BigLinux repositories"
        sudo sed -i '/biglinux/,$d' /etc/pacman.conf

        msg_info "#Add repositories on build environment"
        declare -A entries=(
          [community-stable]='https://repo.communitybig.org/stable/$arch'
          [community-testing]='https://repo.communitybig.org/testing/$arch'
          [community-extra]='https://repo.communitybig.org/extra/$arch'
          [biglinux-stable]='https://repo.biglinux.com.br/stable/$arch'
          [biglinux-testing]='https://repo.biglinux.com.br/testing/$arch'
          [chili-stable]='https://repo.chililinux.com/stable/$arch'
          [chili-testing]='https://repo.chililinux.com/testing/$arch'
          [chili-extra]='https://repo.chililinux.com/extra/$arch'
        )

        for entry in "${!entries[@]}"; do
          section='['"$entry"']'
          server="${entries[$entry]}"

          if ! grep -qF "$section" /etc/pacman.conf; then
            echo -e "\n$section\nSigLevel = PackageRequired\nServer = $server" | \
            sudo tee -a /etc/pacman.conf /etc/chrootbuild/pacman.conf.x86_64 >/dev/null
            msg_info "Added section: $section"
          fi
        done

        if [ "${{ inputs.build_env }}" == "aur" ] || [ "${{ inputs.branch_type }}" == "aur" ]; then
          msg_raw "Configurando para pacote AUR: ${{ inputs.package_name }}"
          msg_info '#Configurações específicas para AUR'
          sudo sed -i 's/^#MAKEFLAGS="-j2"/MAKEFLAGS="-j$(nproc)"/' /etc/makepkg.conf
          sudo sed -i 's/^#BUILDDIR/BUILDDIR/' /etc/makepkg.conf
          sudo sed -i 's/^#PKGDEST/PKGDEST/' /etc/makepkg.conf

          msg_info '#Habilitar o repositório multilib (necessário para alguns pacotes AUR)'
          sudo sed -i '/\[multilib\]/,/Include/s/^#//' /etc/pacman.conf
        fi

        # Configure makepkg
        sudo sed -i '/PACKAGER=/s/.*/PACKAGER="Big Community Package Build <talesam@gmail.com>"/' /etc/makepkg.conf
        sudo sed -i '/MAKEFLAGS=/s/.*/MAKEFLAGS="-j'$(nproc)'"/' /etc/makepkg.conf
        sudo sed -i '/GPGKEY=/s/.*/GPGKEY="AECEEE84E52BBFAA9F1C9DF01EA0CEEEB09B44A3"/; t; $a GPGKEY="AECEEE84E52BBFAA9F1C9DF01EA0CEEEB09B44A3"' /etc/makepkg.conf

        # Modify manjaro-chrootbuild
        sudo sed -i 's|https://repo.manjaro.org/repo|https://nnenix.mm.fcix.net/manjaro|' /usr/lib/manjaro-chrootbuild/util.sh
        sudo sed -i '/-Syy/s/-Syy/-Syy git /' /usr/lib/manjaro-chrootbuild/util-chroot.sh

        msg_info '#Instalar dependências comumente necessárias para builds'
        msg_run "sudo pacman -Sy --needed base-devel git --noconfirm"

        replicate '#'
        msg_run 'cat /etc/pacman.conf'
        replicate '#'
        msg_run 'cat /etc/makepkg.conf'
        replicate '#'

    - name: Download Source code
      shell: bash
      run: |
        # Download the source code
        source /tmp/send_telegram_message.sh
        replicate '#'
        export REPO_OWNER=""
        export REPO_NAME=""
        if [[ "${{ inputs.build_env }}" == "aur" ]]; then
          msg_raw "Cloning AUR package from: ${{ inputs.url }}"
          msg_run "git clone ${{ inputs.url }} aur_package"

          if [[ -d "aur_package" ]]; then
            cd aur_package
            
            # Extrair nome do pacote da URL do AUR
            REPO_ORIGEM_NAME=$(basename "${{ inputs.url }}" .git)
            REPO_ORIGEM_OWNER="aur"
            
            # Exportar para o ambiente do GitHub Actions
            echo "REPO_ORIGEM_NAME=$REPO_ORIGEM_NAME" >> $GITHUB_ENV
            echo "REPO_ORIGEM_OWNER=$REPO_ORIGEM_OWNER" >> $GITHUB_ENV

            if [[ ! -f "PKGBUILD" ]]; then
              die "Error: PKGBUILD not found in the AUR package"
            fi
          else
            die "Error: Failed to clone AUR package"
          fi
        elif [[ -n "${{ inputs.url }}" ]]; then
          msg_raw "Cloning repository from: ${{ inputs.url }}"
          msg_run "git clone ${{ inputs.url }}.git source_repo"
          msg_run 'cd source_repo'

          # Extrair informações do repositório clonado
          REPO_ORIGEM_URL="${{ inputs.repo_origem }}"
          REPO_ORIGEM_NAME=$(basename -s .git "$REPO_ORIGEM_URL")
          REPO_ORIGEM_OWNER=$(echo "$REPO_ORIGEM_URL" | awk -F[/:] '{print $(NF-1)}')

          # Exportar para o ambiente do GitHub Actions
          echo "REPO_ORIGEM_NAME=$REPO_ORIGEM_NAME"   >> $GITHUB_ENV
          echo "REPO_ORIGEM_OWNER=$REPO_ORIGEM_OWNER" >> $GITHUB_ENV

          if [[ -n "${{ inputs.git_branch }}" ]]; then
            msg_raw "Checking out branch: ${{ inputs.git_branch }}"
            msg_run "git checkout ${{ inputs.git_branch }}"
          fi
        else
          msg_warning "No URL provided, assuming already in the correct repository"
        fi
        replicate '#'

    - name: Build package
      shell: bash
      run: |
        # Build package - Construr pacote
        source /tmp/send_telegram_message.sh
        replicate '#'
        msg_raw "Build environment: ${{ inputs.build_env }}"
        msg_raw "Package name     : ${{ inputs.package_name }}"

        msg_info '# Create and set permissions for $PKGDEST and $SRCDEST'
        msg_run 'sudo mkdir -p /home/packages /home/sources /tmp/makepkg'
        msg_run 'sudo chown builduser:builduser /home/packages /home/sources /tmp/makepkg'

        msg_info '# Se entramos em um diretório no passo anterior, vamos garantir que estamos nele'
        if [ "${{ inputs.build_env }}" == "aur" ]; then
          # For packages AUR
          cd ${{ inputs.aur_package_dir }}
          msg_raw "Construindo pacote AUR: ${{ inputs.package_name }}"
          msg_raw "Current AUR package directory: $(pwd)"
          msg_raw "AUR package directory contents:"
          msg_run "ls -la $PWD"

          # Give permissions to builduser for the current directory
          sudo chown -R builduser:builduser .

          # Create temporary directory for makepkg
          sudo mkdir -p /tmp/makepkg
          sudo chown builduser:builduser /tmp/makepkg

          # Verificar ambiente de compilação
          echo "Verificando ambiente de compilação..."
          gcc --version
          meson --version
          ninja --version
          pkg-config --version

          # Detect and import GPG keys if present in PKGBUILD
          if [ -f "PKGBUILD" ]; then
            msg_info "Checking for required PGP keys..."
            if grep -q "validpgpkeys" PKGBUILD; then
              # Extract GPG key from PKGBUILD
              key=$(grep "validpgpkeys" PKGBUILD | sed 's/.*(\"\(.*\)\")/\1/')

              if [ ! -z "$key" ]; then
                msg_raw "Importing GPG key: $key"
                # Try multiple keyservers to ensure key import succeeds
                gpg --keyserver keyserver.ubuntu.com --recv-keys "$key" || \
                gpg --keyserver keys.gnupg.net --recv-keys "$key" || \
                gpg --keyserver hkp://pgp.mit.edu --recv-keys "$key" || \
                msg_warning "Warning: Failed to import key $key"
              fi
            else
              msg_info "No PGP keys defined in PKGBUILD"
            fi
          fi

          # Extract dependencies from PKGBUILD
          source PKGBUILD
          TAG_NAME="$pkgver-$pkgrel"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          msg_info "TAG_NAME   : ${TAG_NAME}"
          msg_info "depends    : ${depends[@]}"
          msg_info "makedepends: ${makedepends[@]}"

          # Install all dependencies using yay
          install_dependencies() {
            if [ -n "$depends" ] || [ -n "$makedepends" ]; then
              msg_info "Installing all dependencies..."
              yay -Sy --asdeps --needed --noanswerdiff --noconfirm "${depends[@]}" "${makedepends[@]}" || {
                msg_warning "Error installing dependencies"
                return 1
              }
            fi
            return 0
          }

          # Call the installation function
          if ! install_dependencies; then
            die "Failed to install dependencies"
          fi

          # Build the package without installing
          msg_raw "Building AUR package: ${{ inputs.package_name }}"
          makepkg -s --noconfirm --noprogressbar --nodeps
        else
          # Para pacotes não-AUR
          gitfolder=$(find -type f -name PKGBUILD | sed 's/PKGBUILD//')
          cd $gitfolder
          source PKGBUILD
          TAG_NAME="$pkgver-$pkgrel"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          msg_info "TAG_NAME   : ${TAG_NAME}"
          msg_info "depends    : ${depends[@]}"
          msg_info "makedepends: ${makedepends[@]}"

          # Ensure architecture is set to x86_64
          sed -i "/^arch=/c\arch=('x86_64')" PKGBUILD
          msg_info "Build arch=x86_64"

          # Determinar o branch de build
          if [ "${{ inputs.build_env }}" == "extra" ]; then
            build_branch="testing"
            msg_info "Ambiente de build é 'extra', usando branch 'testing' para chrootbuild"
          else
            #build_branch="${{ inputs.branch_type }}"
            build_branch="stable"
          fi

          # Executar chrootbuild com o branch determinado
          #sudo chrootbuild -H -p . -b ${build_branch}

          if makepkg -s --noconfirm --noprogressbar --nodeps --skipchecksums; then
            pkgname="${{ inputs.package_name }}"
            full_pkgname="$(find . -type f -iname "$pkgname*.pkg.tar.zst" -print)"
            msg_raw "full_pkgname : $full_pkgname"
            echo "full_pkgname=$full_pkgname" >> $GITHUB_ENV
            msg_run "cp -f $full_pkgname /home/packages/ 2>/dev/null" || msg_warning 'No package found to move'
            msg_ok "Build completed. Checking /home/packages:"
            msg_run 'ls -la /home/packages'
          else
            die "Build with makepkg fail."
          fi
        fi

        msg_info '# Executa comando extra, se fornecido'
        if [[ -n "${{ inputs.extra_command }}" ]]; then
          msg_raw "Executando comando extra: ${{ inputs.extra_command }}"
          ${{ inputs.extra_command }}
        fi

        # Move the compiled package to /home/packages
        #mv *.pkg.tar.zst /home/packages/ 2>/dev/null || msg_warning 'No package found to move'
        cp -f *.pkg.tar.zst /home/packages/ 2>/dev/null || msg_warning 'No package found to move'

        msg_info '# Debug: Mostrar conteúdo do diretório após o build'
        msg_run "ls -la $PWD"
        msg_run 'ls -la /home/sources'
        msg_run 'ls -la /home/packages'
        replicate '#'

    - name: Sign Package
      shell: bash
      run: |
        #Sign Package
        source /tmp/send_telegram_message.sh
        replicate '#'
        msg_run 'cd /home/packages'
        msg_run "ls -lah $PWD"

        # Assina todos os pacotes encontrados
        # Import GPG key
        if gpg --batch --import <<< "${{ inputs.gpg_key }}"; then
          msg_ok "Importação da chave GPG foi bem-sucedida."
          for p in /home/packages/*pkg.tar.zst; do
            [ -e "$p" ] || { msg_info "Nenhum pacote encontrado para assinar."; break; }
            msg_info "Assinando pacote: $p"
            if ! gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg_passphrase }}" --detach-sign "${p}"; then
              msg_warning "Erro ao assinar o pacote: $p"
          fi
        done
          msg_run 'ls -lah $PWD *.sig*' || msg_warning "Nenhum arquivo .sig encontrado"
        else
          die "Erro na importação da chave GPG."
        fi
        replicate '#'

    - name: Generate checksums
      shell: bash
      run: |
        #Generate checksums
        source /tmp/send_telegram_message.sh
        replicate '#'
        msg_run 'cd /home/packages'
        msg_run "ls -lah $PWD"

        for p in *pkg.tar.zst; do
          msg_info "Gerando MD5 para: $p"
          md5sum "$p"     >> "$p.md5"
          msg_info "Gerando MD5 para: $p.sig"
          if md5sum "$p.sig" >> "$p.sig.md5"; then
            msg_ok "MD5 gerado para: $p.sig"
          else
            msg_warning "Falha na geração de MD5 para: $p.sig"
          fi
        done
        msg_run 'ls -lah $PWD *.md5' || msg_warning 'Nenhum arquivo MD5 encontrado'
        replicate '#'

    - name: Push the package to the repository
      if: inputs.push_to_repo == 'true'
      shell: bash
      env:
        LANG: en_US.UTF-8
        LC_ALL: en_US.UTF-8
      run: |
        #Push the package to the repository
        source /tmp/send_telegram_message.sh
        replicate '#'
        # Setup SSH
        msg_run 'mkdir -p /home/builduser/.ssh'
        msg_run "ssh-keyscan -t rsa -p ${{ inputs.repo_port }} ${{ inputs.repo_host }} >> /home/builduser/.ssh/known_hosts"
        ip="${{ inputs.repo_host }}"

        if [[ "${{ inputs.build_env }}" == "aur" ]]; then
          msg_run 'cd /home/packages'
          branch="EXTRA"  # Todos os pacotes AUR vão para EXTRA
        else
          msg_run 'cd /home/packages'
          msg_info '# Set the branch based on BRANCH_TYPE'
          case "${{ inputs.branch_type }}" in
            "stable")
            branch="STABLE"
              ;;
            "extra")
            branch="EXTRA"
              ;;
            *)
            branch="TESTING"
              ;;
          esac
        fi
        msg_run "ls -lha $PWD"

        # Upload the package files
        for i in *.pkg.tar.zst; do
          pkgname=$(basename "$i")
          pkgname_escaped=$(echo "$pkgname" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')
          branch_escaped=$(echo "$branch" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')
          echo "PKGNAME_BASENAME=$pkgname_escaped"  >> $GITHUB_ENV
          echo "PKGNAME_BRANCH=${branch_escaped,,}" >> $GITHUB_ENV
          repo_path="${{ inputs.repo_dir }}"
          file_size_bytes=$(stat -c%s "$i")
          file_size_kb=$((file_size_bytes / 1024))
          file_size_mb=$((file_size_kb / 1024))

          message="✅ <b>[step 2/4] build-package - ENVIANDO 📦 PARA REPOSITÓRIO</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Workflow:</b> <code>build-package/action.yml</code>
          <b>Pacote:</b> <code>${branch_escaped,,}/${pkgname_escaped}</code>
          <b>Tamanho b/Kb/Mb:</b> <code>${file_size_bytes}/${file_size_kb}/${file_size_mb}</code>
          <b>Repositório:</b> <code>${repo_path}</code>
          <b>Branch:</b> <code>${branch_escaped}</code>"
          msg_ok "$message"
          send_telegram_message "$message"

          if rsync --itemize-changes -apz -e "ssh -p ${{ inputs.repo_port }}" $i ${{ inputs.repo_user }}@$ip:${{ inputs.repo_dir }}/${branch,,}/x86_64/; then
            message="✅ <b>[step 3/6] build-package - Sucesso no envio do pacote</b>
            <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
            <b>Workflow:</b> <code>build-package/action.yml</code>
            <b>Pacote:</b> <code>${pkgname_escaped}</code>
            <b>Branch:</b> <code>${branch_escaped}</code>"
            #send_telegram_message "$message"
            :
          else
            message="❌ <b>[step 3/6] build-package - Falha ao enviar pacote</b>
            <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
            <b>Workflow:</b> <code>build-package/action.yml</code>
            <b>Pacote:</b> <code>${pkgname_escaped}</code>
            <b>Branch:</b> <code>${branch_escaped}</code>"
            send_telegram_message "$message"
          fi
        done

        for i in *.sig *.md5; do
          rsync --itemize-changes -apz -e "ssh -p ${{ inputs.repo_port }}" $i ${{ inputs.repo_user }}@$ip:${{ inputs.repo_dir }}/${branch,,}/x86_64/
        done
        replicate '#'

    #    # Runs only if previous steps were successful
    #    - name: Update Repository Database
    #      if: inputs.update_db == 'true' && success()
    #      shell: bash
    #      run: |
    #        #Update Repository Database
    #        source /tmp/send_telegram_message.sh
    #        replicate '#'
    #        # Determine the database name based on the branch type
    #        if [ "${{ inputs.branch_type }}" == "stable" ]; then
    #          branch="STABLE"
    #          db_name="community-stable"
    #        elif [ "${{ inputs.branch_type }}" == "extra" ] || [ "${{ inputs.branch_type }}" == "aur" ]; then
    #          branch="EXTRA"
    #          db_name="community-extra"
    #        elif [ "${{ inputs.branch_type }}" == "testing" ]; then
    #          branch="TESTING"
    #          db_name="community-testing"
    #        else
    #          die "Error: Unknown branch type: ${{ inputs.branch_type }}"
    #        fi
    #
    #        msg_raw "Branch       : $branch"
    #        msg_raw "Database name: $db_name"
    #        branch_escaped=$(echo "$branch" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')
    #        db_name_escaped=$(echo "$db_name" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')
    #
    #        message="🔄 <b>build-package - Iniciando sincronização do banco de dados no repositório</b>"
    #        #send_telegram_message "$message"
    #
    #        ssh ${{ inputs.repo_user }}@${{ inputs.repo_host }} -p ${{ inputs.repo_port }} << EOF
    #          #set -x
    #          cd ${{ inputs.repo_dir }}/${branch,,}/x86_64
    #          echo "Current path: \$PWD"
    #          echo "ls -lah \$PWD"
    #          repo-add -n -R $db_name.db.tar.gz *.pkg.tar.zst
    #          exit_code=\$?
    #          exit \$exit_code
    #        EOF
    #        retval="$?"
    #
    #        if [[ $retval -eq 0 ]]; then
    #          msg_ok "Comando repo-add concluído com código de saída: $retval"
    #          message="✅ <b>build-package - Sincronização do banco de dados no repositório concluida com sucesso</b>"
    #          #send_telegram_message "$message"
    #          :
    #        else
    #          msg_warning "Comando repo-add concluído com código de saída: $retval"
    #          message="❌ <b>build-package - Falha na sincronização do banco de dados no repositório</b>"
    #          send_telegram_message "$message"
    #        fi
    #        replicate '#'

    - name: Clean Old Packages
      if: inputs.update_db == 'true' && success()
      shell: bash
      run: |
        #Clean Old Packages - keeps only the most recent package
        source /tmp/send_telegram_message.sh
        replicate '#'
        msg_info '# Determine the branch and database name based on the branch type'
        case "${{ inputs.branch_type }}" in
          "stable")
          branch="STABLE"
            db_name="community-stable"
            ;;
          "aur" | "extra")
          branch="EXTRA"
            db_name="community-extra"
            ;;
          "testing")
          branch="TESTING"
            db_name="community-testing"
            ;;
          *)
            die "${red}Error: Unknown branch type: ${{ inputs.branch_type }} ${reset}"
            ;;
        esac
        msg_raw "Branch       : $branch"
        msg_raw "Database name: $db_name"
        branch_escaped=$(echo "$branch" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g')

        message="🧹<b>[step 4/6] Iniciando limpeza de pacotes antigos</b>
        <b>branch:</b> <code>${branch_escaped}</code>"
        #send_telegram_message "$message"

        ssh "${{ inputs.repo_user }}@${{ inputs.repo_host }}" -p "${{ inputs.repo_port }}" << 'EOF'
          cd "${{ inputs.repo_dir }}/${{ inputs.branch_type }}/x86_64"
          echo "Current path: \$PWD"
          echo "ls -lah \$PWD"

          # Manter apenas a versão mais recente de cada pacote
          FETCH_RE='-[^-]+[0-9]+[^.]*.pkg[^.]*.tar.zst'
          PKG_EXT='pkg.tar.zst'
          AllOldPackages=$(find "$PWD" -type f -iname "*.$PKG_EXT" | sort -Vr | awk -F "$FETCH_RE" 'lista[$1]++')
          for old in ${AllOldPackages[@]}; do
            echo -e "${red}=>Removendo pacote antigo : [$((++count))]=>${old} ${reset}"
            rm -fv "${old}" "${old}.sig" "${old}.md5" "${old}.sig.md5"
          done

          # Remover os bancos de dados existentes
          rm -f ${db_name}.db.tar.gz ${db_name}.files.tar.gz

          # Recriar o banco de dados com os pacotes presentes
          repo-add ${db_name}.db.tar.gz *.pkg.tar.zst

          # Remover arquivos .sig, .md5 e .sig.md5 órfãos
          for file in *.sig *.md5 *.sig.md5; do
            base_name=${file%.*}
            echo -e "\033[01;32m=>Procurando por arquivo orfão : $file ${RESET}"
            if [[ ! -f "${base_name}" ]]; then
              echo -e "\033[01;31m=>Removendo arquivo orfão : $file ${RESET}"
              rm -fv "$file"
            fi
          done
          exit_code=$?
          exit $exit_code
        EOF
        retval="$?"

        if [[ $retval -eq 0 ]]; then
          msg_ok "Limpeza concluída com código de saída: $retval"
          message="🧹 <b>[step 4/6] build-package - INICIANDO LIMPEZA DE PACOTES ANTIGOS</b>
          ✅ <b>[step 5/6] Limpeza de pacotes antigos concluída com êxito</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Workflow:</b> <code>build-package/action.yml</code>"
          #send_telegram_message "$message"
          :
        else
          msg_warning "Limpeza concluída com código de saída: $retval"
          message="🧹 <b>[step 4/6] build-package - INICIANDO LIMPEZA DE PACOTES ANTIGOS</b>
          ❌ <b>[step 5/6] Falha na limpeza de pacotes antigos</b>
          <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
          <b>Workflow:</b> <code>build-package/action.yml</code>"
          send_telegram_message "$message"
        fi
        replicate '#'

    - name: Extrair data do nome do arquivo .zst e definir tag_name
      if: ${{ inputs.teste_input != true }}
      id: set-tag-name
      shell: bash
      run: |
        #Extrair data do nome do arquivo .zst e definir tag_name
        source /tmp/send_telegram_message.sh
        replicate '#'
        FILENAME="${{env.PKGNAME_BASENAME}}"
        #TAG_NAME=$(echo "$FILENAME" | grep -oP '\d{2}\.\d{2}\.\d{2}|\d{8}' | sed -E 's/(\d{2})\.(\d{2})\.(\d{2})/20\1\2\3/')-$(date +%H%M)
        TAG_NAME="${{env.TAG_NAME}}"
        echo "PKG_TAG_NAME=$TAG_NAME"                            >> $GITHUB_ENV
        echo "pkg_path=/home/packages/${{env.PKGNAME_BASENAME}}" >> $GITHUB_OUTPUT
        echo "PKG_PATH=/home/packages/${{env.PKGNAME_BASENAME}}" >> $GITHUB_ENV

        msg_raw "FILENAME    : ${{env.PKGNAME_BASENAME}}"
        msg_raw "TAG_NAME    : ${{env.TAG_NAME}}"
        msg_raw "PKG_TAG_NAME: $TAG_NAME"
        msg_raw "pkg_path    : /home/packages/${{env.PKGNAME_BASENAME}}"
        msg_raw "PKG_PATH    : /home/packages/${{env.PKGNAME_BASENAME}}"
        replicate '#'

    - name: Prepare Package for release (7z)
      if: inputs.branch_type != 'testing'
      id: prepare-package
      shell: bash
      run: |
        #Prepare Package for release (7z)
        source /tmp/send_telegram_message.sh
        replicate '#'
        pushd /home/packages || true
        # Prepara a mensagem
        message="⏳ <b>[step 3/4] build-package - Prepare Package for release (7z)</b>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Workflow:</b> <code>build-package/action.yml</code>
        <b>Pacote:</b> <code>${{ env.PKGNAME_BRANCH }}/${{ env.PKGNAME_BASENAME }}</code>
        <b>Inicio:</b> <code>${START_TIME}</code>"
        send_telegram_message "$message"
        msg_info "$message"
        replicate '-'
        msg_run "ls -lah $PWD"
        release=$(basename "${{env.PKG_PATH}}" .pkg.tar.zst)
        release_name="${release}"

        # Obtém o tamanho do arquivo em bytes
        file_size=$(stat -c%s "${{env.PKG_PATH}}")

        # Verifica se o tamanho é maior que 2000 MB (2000 * 1024 * 1024 bytes)
        if (( file_size > 2000 * 1024 * 1024 )); then
          msg_info "O arquivo é maior que 2000 MB. Compactando e dividindo..."
          7z a -v2000m "${release}.7z" "${{env.PKG_PATH}}" # Compacta e divide em partes de 2000 MB
          upload_path="${release}.7z*"
        else
          msg_info "O arquivo não é maior que 2000 MB. Não será compactado."
          upload_path="${{env.PKG_PATH}}"
        fi

        echo "release=${release}"         >> "$GITHUB_OUTPUT"
        echo "release_name=${release}"    >> "$GITHUB_OUTPUT"
        echo "upload_path=${upload_path}" >> "$GITHUB_OUTPUT"

        msg_info "Package ${release} prepared for release"
        replicate '-'
        msg_run "ls -lah $PWD"
        replicate '-'
        # Debug
        msg_info "full_pkgname (original): ${{env.PKG_PATH}}"
        msg_info "Upload Path            : ${upload_path}"
        msg_info "full_pkgname (sig)     : ${{env.PKG_PATH}}.sig"
        msg_info "full_pkgname (md5)     : ${{env.PKG_PATH}}.md5"
        msg_info "full_pkgname (sig.md5) : ${{env.PKG_PATH}}.sig.md5"
        msg_info "release                : ${release}"
        msg_info "release_name           : ${release_name}"
        popd || true
        replicate '='

    - name: Verificar se o package foi gerado corretamente
      if: ${{ inputs.teste_input != true }}
      shell: bash
      run: |
        # Verificar se o arquivo package foi gerado corretamente
        source /tmp/send_telegram_message.sh
        replicate '='
        pushd /home/packages || true
        msg_run 'ls -lah --color=auto $PWD'
        popd || true
        replicate '='

    - name: Set Repository
      id: set_repository
      shell: bash
      run: |
        #Set Repository
        source /tmp/send_telegram_message.sh
        replicate '='
        msg_raw "REPO_ORIGEM_OWNER      : ${{ env.REPO_ORIGEM_OWNER }}"
        msg_raw "REPO_ORIGEM_NAME       : ${{ env.REPO_ORIGEM_NAME }}"
        msg_raw "github.repository_owner: ${{ github.repository_owner }}"
        msg_raw "github.repository      : ${{ github.repository }}"

        case "${{ env.REPO_ORIGEM_OWNER }}" in
          communitybig|talesam)
              repository="${{ env.REPO_ORIGEM_OWNER }}/${{ env.REPO_ORIGEM_NAME }}"
              ;;
          *)
            if [ "${{ github.repository_owner }}" != "${{ env.REPO_ORIGEM_OWNER }}" ]; then
              repository="${{ github.repository }}"
            else
              repository="${{ env.REPO_ORIGEM_OWNER }}/${{ env.REPO_ORIGEM_NAME }}"
            fi
            ;;
        esac
        echo "repository=$repository" >> $GITHUB_ENV
        msg_raw "repository             : $repository"
        replicate '='

    - name: Create Release
      if: inputs.branch_type != 'testing'
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.PKG_PATH }}.sig
          ${{ env.PKG_PATH }}.md5
          ${{ steps.prepare-package.outputs.upload_path }}
        tag_name: ${{ env.PKG_TAG_NAME }}
        name: ${{ steps.prepare-package.outputs.release_name }}
        generate_release_notes: true
        body: |
          - **Data e Hora        :** ${{ env.START_TIME }}
          - **Arquivo PKG        :** ${{ env.PKGNAME_BASENAME }}
          - **Arquivo SIG        :** ${{ env.PKGNAME_BASENAME }}.sig
          - **Arquivo MD5        :** ${{ env.PKGNAME_BASENAME }}.md5
          - **Nome do Repositório:** ${{ env.REPO_ORIGEM_OWNER }}/${{ env.REPO_ORIGEM_NAME }}
        repository: "${{ env.repository }}"
        token: "${{ env.ORGANIZATION_TOKEN }}"
        draft: false
        prerelease: false
        fail_on_unmatched_files: false

    - name: Telegram Alert Fail
      if: failure()
      shell: bash
      run: |
        #Send a Telegram alert if the build fails
        source /tmp/send_telegram_message.sh
        replicate '#'
        link_action=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        message="🚨 <b>FALHA ao criar pacote:</b>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Pacote:</b> <code>${{ github.event.action }}</code>
        <b>Branch:</b> <code>${{ github.ref_name }}</code>
        <b>URL erro:</b> <a href='https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'>${link_action}</a>"
        msg_warning "$message"
        send_telegram_message "$message"
        replicate '#'

    - name: Capturar hora de término e calcular duração
      shell: bash
      run: |
        #Capturar hora de término e calcular duração
        source /tmp/send_telegram_message.sh
        replicate '#'
        START_TIME="${{ inputs.start_time }}"
        START_TIMESTAMP="${{ inputs.start_timestamp }}"
        END_TIME=$(date +"%Y-%m-%d %H:%M:%S")  # Hora completa
        END_TIMESTAMP=$(date +%s)
        duration=$((END_TIMESTAMP - START_TIMESTAMP))

        hours=$((duration / 3600))
        minutes=$(( (duration % 3600) / 60 ))
        seconds=$((duration % 60))

        message="🏆 <b>[step 4/4]build-package - JOB FINALIZADO EM ⏳:</b> <code>${hours}h ${minutes}m ${seconds}s</code>
        <b>Job:</b> <code>#${GITHUB_RUN_NUMBER}</code>
        <b>Workflow:</b> <code>build-package/action.yml</code>
        <b>Pacote:</b> <code>${{ env.PKGNAME_BRANCH }}/${{ env.PKGNAME_BASENAME }}</code>
        <b>Inicio:</b> <code>${START_TIME}</code>
        <b>Fim:</b> <code>${END_TIME}</code>
        <b>Tempo:</b> <code>${hours}h ${minutes}m ${seconds}s</code>"
        send_telegram_message "$message"
        msg_ok "$message"
        replicate '#'
